service: sales-api

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: $AWS_REGION

# 'iamRoleStatement' defines the permission policy for the Lambda function.
# In this case Lambda functions are granted with permissions to access DynamoDB.
iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:$AWS_REGION:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /products
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate the api via Cognito User Pool. Update the 'arn'
  #     with your own User Pool ARN
  create:
    handler: index.create
    events:
      - http:
          path: products
          method: post
          cors: true
          authorizer:
            arn: $USER_POOL_ARN

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /products/{id}
    # - method: GET request
    handler: index.get
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
          authorizer:
            arn: $USER_POOL_ARN

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /products
    # - method: GET request
    handler: index.list
    events:
      - http:
          path: products
          method: get
          cors: true
          authorizer:
            arn: $USER_POOL_ARN

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /products/{id}
    # - method: PUT request
    handler: index.update
    events:
      - http:
          path: products/{id}
          method: put
          cors: true
          authorizer:
            arn: $USER_POOL_ARN

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /products/{id}
    # - method: DELETE request
    handler: index.remove
    events:
      - http:
          path: products/{id}
          method: delete
          cors: true
          authorizer:
            arn: YOUR_USER_POOL_ARN